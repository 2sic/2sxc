@page
@using ToSic.Eav.Apps.Sys.State
@using ToSic.Eav.Data.Sys.Entities
@using ToSic.Eav.Metadata
@using ToSic.Lib.DI
@using ToSic.Sxc.Services
@using ToSic.Sys.DI
@inject IAppStateCacheService AppStateCacheService
@inject IServiceProvider ServiceProvider;
@{
  ViewData["Title"] = "Edit 2sxc data";

  // Adjust these values to your testing environment
  var appIdentity = IntegrationConstants.AppIdentity;
  var appState = AppStateCacheService.Get(appIdentity);
  var firstItem = appState.List.First();
}
<h1>@ViewData["Title"]</h1>

<script language="javascript">
    // Important note
    // This requires that the JS is loaded on the page. In this sample it's done in the _Layout.cshtml
    // It also requires some environment properties to be set - which is also done in _Layout.cshtml
    function getSxc() {
        return $2sxc({ zoneId: @appIdentity.ZoneId, appId: @appIdentity.AppId });
    }
</script>
<p>
  Try using the $2sxc js api for @appIdentity.ZoneId/@appIdentity.AppId - first item @firstItem.EntityId <br />
</p>

<ol>
  <li>Check api works - <a href="/api/pong/pong" target="_blank">Test</a></li>
  <li><a href="/api/sxc/sys/insights/help" target="_blank">Insights</a></li>
  <li><a href="/api/sxc/Dialog/Settings?appId=@appIdentity.AppId" target="_blank">Call Dialog/Settings?appId=@appIdentity.AppId</a></li>
  <li><a href="#" onclick="getSxc().manage.run('app')">Click to open app-dialog</a></li>
  <li><a href="#" onclick="getSxc().manage.run('edit', { entityId: @firstItem.EntityId })">Click to open edit dialog</a></li>
</ol>

<hr />
<h2>ADAM Images / Files</h2>
<ol>
    <!-- TODO: check if it should be CMS.run -->
    <li><a href="#" onclick="getSxc().manage.run('edit', { entityId: @IntegrationConstants.ItemWithImagesId })">Edit something with images!</a></li>
</ol>
@{
    // Create a log-object (optional) which is used to track what the code does
    // could also just be null
    var log = new LogAdapter(new Log("My.Log"));

    // Get the App execution context since our code here doesn't have it
    var dynCodeSvc = ServiceProvider.Build<IDynamicCodeService>();
    var dynCode = dynCodeSvc.OfApp(appIdentity);

    var entityWithAdam = dynCode.App.Data.List.One(IntegrationConstants.ItemWithImagesId);
    var folder2 = dynCode.AsAdam(entityWithAdam, IntegrationConstants.ImagesField);
}
<h3>Files in @dynCode.AsDynamic(entityWithAdam).EntityTitle </h3>
<ol>
  @foreach (var img in folder2.Files)
  {
    <li>@img.Url</li>
  }
</ol>

<hr />
<h2>Metadata</h2>
@{
  var targetType = (int)TargetTypes.CmsItem; // 10;
  var myItemId = 1234;
  var md = appState.GetMetadata(targetType, myItemId);
}
Found Metadata: @md.Count()
<ol>
  @foreach (var m in md)
  {
    <li onclick="getSxc().manage.run('edit', { entityId: @m.EntityId })">@m.Type.Name: @m.GetBestTitle()</li>
  }
</ol>


<script>
    function openMetadata(targetId) {
        console.log('test1');
        // TODO: CHECK Target property - was this public API? how can we prevent breaks?
        const forRef = { Number: targetId, TargetType: @targetType, Singleton: true };
        getSxc().manage.run('edit', {
            items: [
                { ContentTypeName: 'MetadataGps', For: forRef, Operations: "singleton", Prefill: { Color: "super-pink" } },
                { ContentTypeName: 'MetadataCar', For: forRef, Sfx: "singleton" }
            ]
        });
    }
</script>

wip
<p>
  <a href="#" onclick="openMetadata('@myItemId')">Edit Test for @myItemId</a>
</p>

<p>
  @{
    var tempId = 2742;
  }
  <a href="#" onclick="openMetadata(@tempId)">Edit Test for @tempId</a>
</p>

<hr />
<p>
  <!-- Note to myself: key seems to have a bug, if it's not a string-->
  <a href="#" onclick="getSxc().manage.run('edit', {
    items: [
        { ContentTypeName: 'MetadataGps', EntityId: 0, Metadata: { targetType: 10, keyType: 'number', key: @myItemId } },
        { ContentTypeName: 'MetadataCar', EntityId: 0, For: { targetType: 10, Number: @myItemId } }
    ]
})">Edit Test</a>
</p>

kind of works...
<p>
  <a href="#" onclick="getSxc().manage.run('edit', { metadata: { targetType: @targetType, keyType: 'number', key: @myItemId }, contentType: 'MetadataGps', entityId: 0 })">Edit Metadata</a>
</p>