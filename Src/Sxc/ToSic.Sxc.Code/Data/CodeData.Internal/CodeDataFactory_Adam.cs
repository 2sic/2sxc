using ToSic.Eav.Context;
using ToSic.Sxc.Adam;
using ToSic.Sxc.Adam.Internal;
using ToSic.Sxc.Apps;
using ToSic.Sxc.Context.Internal;

namespace ToSic.Sxc.Data.Internal;

partial class CodeDataFactory
{
    public AdamManager AdamManager
    {
        get => field ??= GetAdamManager();
        private set;
    }

    /// <summary>
    /// Special helper - if the DynamicCode is generated by the service or used in a WebApi there is no block, but we can figure out the context.
    /// </summary>
    /// <returns></returns>
    /// <exception cref="Exception"></exception>
    private AdamManager GetAdamManager()
    {
        // if this was initialized with an ADAM manager, use that
        // 2023-08-08 2dm - try to use the new GetOnce.Reset functionality
        //if (_adamManagerPrepared != null) return _adamManagerPrepared;

        // If we don't even have a _DynCodeRoot (like when exporting from a neutral WebAPI)
        if (_CodeApiSvc is null)
            throw new($"Can't create App Context for {nameof(AdamManager)} in {nameof(ICodeDataFactory)} - no block, no App");

        IContextOfApp contextOfApp = ExCtx.GetState<IContextOfBlock>();
        // TODO: @2dm - find out / document why this could even be null
        if (contextOfApp == null)
        {
            var app = ExCtx.GetState<IApp>();
            if (app == null)
                throw new("Can't create App Context for ADAM - no block, no App");
            contextOfApp = contextOfAppLazy.Value;
            contextOfApp.ResetApp(app);
        }

        return adamManager.Value.Init(contextOfApp, this, CompatibilityLevel);
    }
    #region ADAM / Folder

    public IFile File(int id)
        => AdamManager.File(id);
    //public IFile File(Field fel)
    //    => AdamManager.File(id);

    //public IFile File(IField field)
    //    => AdamManager.File(field);

    public IFolder Folder(int id)
        => AdamManager.Folder(id);

    public IFolder Folder(ICanBeEntity item, string name, IField field)
        => AdamManager.Folder(item.Entity.EntityGuid, name, field);

    public IFolder Folder(Guid entityGuid, string fieldName, IField field = default)
        => AdamManager.Folder(entityGuid, fieldName, field);

    #endregion

}